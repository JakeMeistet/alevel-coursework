'All icons for all buttons are from https://icons8.com/icons where all credit goes to them for the images

'This search wasn't previously avaliable to the user in the prototype version of the system. This allows for a user who has the admin password search for information within all of the user's and not just for their specific user.
'A linear search us completed similarly to that of the normal user search, however the user enters the ID they are also looking for to match the date.

Public Class AdminSearch
    'File is declared as the directory/path of the MyDocuments folder for the computer that the program is being run on.
    'I have used this rather than hardwriting all directories because this allows for seamless use on different computers.
    'This is also used for the basis for all directories because the folder Cycling Tracker Final is made in MyDocuments.
    'The special folder locates the path for specific folders within the operating system
    Dim File = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
    'Directory is declared as a string so that the file directories can be specified where necessary
    'Every time the directory needs to change I just use Directory to store the current path.
    'An example of the directory would be Directory  = File and Module1.PersonalDirectory where the 
    'endings to the of the paths are stored as public readonly strings in Module1 so they can be accessed`
    'in every form easily without being changes whatsoever.
    Dim Directory As String

    'Private sub to detect the search button click
    Private Sub BtnSearch_Click(sender As Object, e As EventArgs) Handles BtnSearch.Click
        'ID is declared as an integer
        'ID is used to allow the user to search for a specific ride under a specific user
        'the admin would input an ID e.g. '1' as well as a date and if there is a record in the file
        'with that ID and date then the data will be displayed.
        Dim ID As Integer
        'If the text input by the user in the textbox TxtID is blank 
        'This is all used to validate so if the ID was blank then the
        'program would tell the user to ensure that there is both an ID 
        'and a date.
        If TxtID.Text = "" Then
            'Messagebox will ask the user to input an ID and a date
            MsgBox("Please input an ID and a date")
            'Else other checks are ran for validation puposes and to avoid any errors
        Else
            'If the text input into the textbox TxtID is not numeric
            'The ID must be a numeric value because the user IDs are set
            'and generated by the program itself as numbers so the search request should
            'be a number otherwise the user will not be found.
            If IsNumeric(TxtID.Text) = False Then
                'Messagebox will tell the user that the ID must be an integer and gives an example of 1
                MsgBox("ID must be an integer e.g. 1")
                'Else - the ID must be in the correct format then checks on the date are ran to ensure
                'that the date input is correct
            Else
                'If any of the date information is blank
                'This is used to validate if the inpu for the date numbers were blank
                'if they are then the user is asked to input something into the textboxs for their search.
                If DaySearch.Text = "" Or MonthSearch.Text = "" Or YearSearch.Text = "" Then
                    'Messagebox will ask the user to input the requested data
                    MsgBox("Please input a correct date")
                    'Else - The textboxes are no longer blank so the program checks whether all of the inputs
                    'for dates are numeric
                Else
                    'If the date information input by the user isn't numeric
                    'This is for validation because a date in this format can't be
                    'any characters that aren't letters so the program checks that the
                    'values input are numeric and if not it will ask the user to re-input the data
                    If IsNumeric(DaySearch.Text) = False Or IsNumeric(MonthSearch.Text) = False Or IsNumeric(YearSearch.Text) = False Then
                        'Messagebox will tell the user that the dates need to be input as numbers
                        MsgBox("One or more of your inputs are not numbers, re enter your information.")
                        'Else - the date is numeric so the program will continue to perform further validation
                    Else
                        'If the date information length (per textbox) is 2
                        'This is necessary for format checking. My program uses dates in the format dd/mm/yy so
                        'this if statement ensures that once the inputs are numeric that they are a maximum of 2 in length
                        If DaySearch.Text.Length = 2 And MonthSearch.Text.Length = 2 And YearSearch.Text.Length = 2 Then
                            'If the format is correct then date checks are ran
                            'Checks to determine whether a date actually exists
                            'This ensures that the date input by the user isn't anything beyond this year
                            'and that months aren't above 12 as well as days not being above 31 days.
                            'I could've included checks to ensure that the user can't input dates beyond the present
                            'day however I decided to not do this currently because the program would need a way to find the
                            'current date and then perform checks on that.
                            If DaySearch.Text > 31 Or DaySearch.Text < 1 Or MonthSearch.Text > 12 Or MonthSearch.Text < 1 Or YearSearch.Text > 19 Then
                                'If date doesn't exist
                                'Messagebox is displayed telling the user the date doesn't exist
                                MsgBox("That date doesn't exist")
                                'Else - If the date is correct then basic leap year checks are ran
                            Else
                                'If the month is February and the day is greater than the 29th
                                'Even though this doesn't check for specific leap years, it ensures that dates in
                                'February can't go above the 29th no matter what year is input by the user.
                                If MonthSearch.Text = "02" And DaySearch.Text > 29 Then
                                    'Messagebox tells the user that the date doesn't exist
                                    MsgBox("That date doesn't exist")
                                    'Else - The checks are complete and the program continues
                                Else
                                    'ID is set to the ID input in TxtID.text
                                    ID = TxtID.Text
                                    'Read subroutine is initiated passing ID through it
                                    Read(ID)
                                End If
                            End If
                            'Else
                        Else
                            'MessageBox is displayed telling the user that the date is written in the incorrect format
                            'The user will then have to input the dates again until they are written in the correct format
                            'e.g. 28/01/02
                            MsgBox("The date is written in the incorrect format")
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    'Subroutine Read passing ID ByVal
    'This subroutine is used to read some of the basic information from CyclingDetails.txt
    'Before the linearsearch subroutine performs the searches for the user's data this subroutine 
    'ensures that any data needed for the search is aquired beforehand as well as performing checks
    'to prevent argument out of range exception errors when reading from the file.
    Sub Read(ByVal ID)
        'Directory is set to the directory/path of CyclingDetails.txt
        'This is done by combining the path for MyDocuments(File) as well as the end of the path
        'for CyclingDetails.txt which is stored under CyclingDirectory in Module1 as a Public ReadOnly String
        Directory = File & Module1.CyclingDirectory
        'Lines is declared as a string to read all lines of CyclingDetails.txt
        'ReadAllLines reads all of the lines and then closes the program immediately afterwards
        'Used to find the length of CyclingDetails.txt
        Dim lines As String() = IO.File.ReadAllLines(Directory)
        'I have used this to read from a file rather than just using streamreader so that
        'when I need to read a specific line from a file I can use the ReadLine function
        'and simply enter the line number I would need.
        'Reader is declared as a Streamreader to read from CyclingDetails.txt
        Dim Reader As New System.IO.StreamReader(Directory)
        'allLines is neclared as a list of string values
        'An example of data stored under allLines would be '1' which would be a userID
        'another example would be 12 which would be the speed they cycled.
        Dim allLines As List(Of String) = New List(Of String)
        'Loop while Reader doesn't reach the end of the file
        'This do while loop is used to read all of the lines in the necessary file
        'and then store the next line read in the allLines list.
        'I have chosen to use a do while because the loop must execute
        'at least one or more times whereas if I used a normal while loop
        'then I wouldn't know If I would need it to loop at all at runtime.
        Do While Not Reader.EndOfStream
            'Next line is read and added to allLines list
            allLines.Add(Reader.ReadLine())
        Loop
        'File is closed
        Reader.Close()
        'If the length of CyclingDetails.txt is less than 1
        'This is for validation to prevent Argument Out Of Range Exception
        'errors from occuring so the program doesn't attempt to read more lines than what are on the file.
        If lines.Length < 1 Then
            'The user will be told through a messagebox they have no records
            MsgBox("There are no cycling records")
            'Else - The program will continue with its usual function reading from the file
        Else
            'InputSearch and LineRead are declared as strings
            'Input search is set as the date input by the user with the '/'
            'added by the program itself. This is used to search for that line
            'within the text file.
            'LineRead is used to read the next line from the file in the linear search subroutine.
            'Both of these variables are Local variables where these paramaters are then passed to
            'the LinearSearch subroutine. This allows for copies to be passed without effecting the
            'original value of the variable.
            Dim InputSearch, LineRead As String
            'Input search is set to the day/month/year inputted and combined into a date format
            'This is done by combining the text input by the user from the Day, Month and Year Search
            'textboxes on the form as well as adding the '/' in between the values to complete the date.
            InputSearch = DaySearch.Text & "/" & MonthSearch.Text & "/" & YearSearch.Text
            'LineNumber is declared as an integer
            'This is used to find the line number of the data requested by the user
            'This variable is passed into the LinearSearch subroutine to be used in the
            'Search for the data requested, this will increment by 1 everytime the search occurs
            'so that the next line can be read from the file. This is always one line ahead of CheckNumber
            Dim LineNumber As Integer
            'LineRead is set to the first line from CyclingDetails.txt
            LineRead = ReadLine(LineNumber, allLines)
            'CheckNumber is declared as an Integer
            'This is used to find the line number of the data requested by the user
            'This variable is passed into the LinearSearch subroutine to be used in the
            'Search for the data requested, this will increment by 1 everytime the search occurs
            'so that the next line can be read from the file
            Dim CheckNumber As Integer
            'CheckNumber is set to 0
            'LineNumber is set to 1
            CheckNumber = 0
            LineNumber = 1
            'CheckID and CheckSearch are declared as strings
            'These variables are also passed into the LinearSearch subroutine
            'These are used to read the next lines from the CyclingDetails.txt
            'where CheckSearch corresponds to the line LineNumber and CheckID corresponds
            'to the line CheckNumber.
            Dim CheckID, CheckSearch As String
            'CheckSearch is set to the value of line 1 in CyclingDetails.txt
            'CheckID is set to the value of the first line in CyclingDetails.txt
            CheckSearch = ReadLine(LineNumber, allLines)
            CheckID = ReadLine(CheckNumber, allLines)

            'LinearSearch Function is initiated passing the necessary varibles/parameters through it
            LinearSearch(LineNumber, CheckNumber, CheckSearch, CheckID, ID, InputSearch, allLines)
        End If
    End Sub

    'Public function used to read specific lines from a file
    Public Function ReadLine(lineNumber As Integer, lines As List(Of String)) As String
        'lines(lineNumber) is returned so specific lines can be read from a file
        Return lines(lineNumber)
    End Function

    'Linear Search function passing the necessary variables through by value
    'All of the necessary paramaters are passed through ByVal from the Read(ID) subroutine
    'This subroutine performs all of the linear searches for the admin to view the data from the
    'User and date that they wish to see.
    Sub LinearSearch(ByVal LineNumber, ByVal CheckNumber, ByVal CheckSearch, ByVal CheckID, ByVal ID, ByVal InputSearch, ByVal allLines)
        'Directory is set to the path of CyclingDetails.txt
        'This is done by combining the path for MyDocuments and the end of the path for CyclingDetails.txt
        'Which is stored under the ReadOnly variable CyclingDirectory in Module1
        Directory = File & Module1.CyclingDirectory
        'Lines is declared as a string to read all lines of CyclingDetails.txt
        'ReadAllLines reads all of the lines and then closes the program immediately afterwards
        'Used to find the length of CyclingDetails.txt
        Dim lines As String() = IO.File.ReadAllLines(Directory)
        'Loop until CheckID is equal to ID and CheckSearch is equal to InputSearch
        'Or loop until CheckNumber + 6 or LineNumber + 6 is greater than or equal to the length of the file
        'This loop must execute at least once to search hence the Do Loop Until has been used.
        'The loop also allows for the program to exit the loop immediately once a certain condition is met.
        Do
            'If CheckID doesn't equal ID
            'This is one of the first comparisons for the search where the program
            'looks for an ID in the file that matches the requested UserID
            Directory = File & Module1.CyclingDirectory
            Dim lines2 As String() = IO.File.ReadAllLines(Directory)
            If CheckID <> ID And CheckNumber + 6 < lines2.Length Then
                'CheckNumber and LineNumber increment by 6
                'Every 6th line would be the next ID and Date. CheckNumber starts at line 0
                'This corresponds with every ID every 6th Line, whereas LineNumber starts on Line 1
                'This corresponds with every date in the file every 6th line.
                CheckNumber = CheckNumber + 6
                LineNumber = LineNumber + 6
                'CheckSearch is set to the line LineNumber read from the file
                'This reads the next date in the file for the search
                CheckSearch = ReadLine(LineNumber, allLines)
                'CheckID is set to the line CheckNumber read from the file
                'This then reads the next ID stored in the file for the search
                CheckID = ReadLine(CheckNumber, allLines)
                'Else
            Else
                Directory = File & Module1.CyclingDirectory
                Dim lines3 As String() = IO.File.ReadAllLines(Directory)
                'If CheckSearch doesn't equal INputSearch
                If CheckSearch <> InputSearch And CheckNumber + 6 < lines3.Length Then
                    'CheckNumber and LineNumber increment by 6
                    'Every 6th line would be the next ID and Date. CheckNumber starts at line 0
                    'This corresponds with every ID every 6th Line, whereas LineNumber starts on Line 1
                    'This corresponds with every date in the file every 6th line.
                    CheckNumber = CheckNumber + 6
                    LineNumber = LineNumber + 6
                    'CheckSearch is set to the line LineNumber read from the file
                    'This reads the next date in the file for the search
                    CheckSearch = ReadLine(LineNumber, allLines)
                    'CheckID is set to the line CheckNumber read from the file
                    'This then reads the next ID stored in the file for the search
                    CheckID = ReadLine(CheckNumber, allLines)
                End If
            End If
            'Loop ends when requirements met
        Loop Until (CheckID = ID And CheckSearch = InputSearch) Or (CheckNumber + 6 >= lines.Length Or LineNumber + 6 >= lines.Length)
        'If CheckID doesn't equal ID or CheckSearch doesn't equal InputSearch
        'This is used when the search comes out blank where the date and/or ID
        'requested don't match up to data within the text file, therefore the user
        'is told that that user has no records under the date.
        If CheckID <> ID Or CheckSearch <> InputSearch Then
            'Messagebox notifies the user that there are no records under that date
            MsgBox("There are no records under that date and/or ID.")
            'Else - the information requested has been successfully found
        Else
            'The Data in the textboxes is set to the necessary lines read from the file
            'The line numbers are known from the search and the information is output to
            'the textboxees on the form.
            SpeedOutput.Text = ReadLine(LineNumber + 1, allLines) & " m/ph"
            DistanceOutput.Text = ReadLine(LineNumber + 2, allLines) & " miles"
            TimeOutput.Text = ReadLine(LineNumber + 3, allLines) & " minutes"
            CaloriesOutput.Text = ReadLine(LineNumber + 4, allLines) & " kCal"
        End If
    End Sub

    'Private subroutine to detect when done button is clicked
    Private Sub BtnDone_Click(sender As Object, e As EventArgs) Handles BtnDone.Click
        'Current form closes
        Me.Close()
    End Sub

    'Private subroutine to run when the form loads
    Private Sub AdminSearch_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        'Directory is set to the directory of PastID.txt
        'This is done by combining the path for MyDocuments which is under the
        'variable File and taking the end of the direcory from the public, readonly
        'IDDirectory stored in Module1
        Directory = File & Module1.IDDirectory
        'I have used this to read from a file rather than just using streamreader so that
        'when I need to read a specific line from a file I can use the ReadLine function
        'and simply enter the line number I would need.
        'IDReader is declared as a Streamreader to read from PastID.txt
        Dim IDReader As New System.IO.StreamReader(Directory)
        'IDallLines is neclared as a list of string values
        'An example of data stored under allLines would be '1' which would be a userID
        Dim IDallLines As List(Of String) = New List(Of String)
        Dim allLines As List(Of String) = New List(Of String)
        'Loop while IDReader doesn't reach the end of the file
        'This do while loop is used to read all of the lines in the necessary file
        'and then store the next line read in the IDallLines list.
        'I have chosen to use a do while because the loop must execute
        'at least one or more times whereas if I used a normal while loop
        'then I wouldn't know If I would need it to loop at all at runtime.
        Do While Not IDReader.EndOfStream
            'The line read is added to the list IDallLines
            IDallLines.Add(IDReader.ReadLine)
        Loop
        'File is closed
        IDReader.Close()
        'ID is declared as string
        'ID is set to the value in the first line of ID.txt
        'This variable is used to assign the value from the first line of PastID.txt
        'this line always stores the current user's ID
        Dim ID As String = ReadLine(0, IDallLines)
        'ParacyclistCheck subroutine is intiated passing the variable ID through it
        ParacyclistCheck(ID)
    End Sub

    'This subroutine has been used to check whether a user is a paracyclist or not.
    'The checks made in this subroutine are necessary for changes in the GUI or changes 
    'with suggestions for equipment the user can use. The subroutine also allows for disabled 
    'users to be taken into account with my system. When the user registers for the first time 
    'they will be asked whether they are a paracyclist this then leads to a menu to specify 
    'what bike they have to use when cycling which then allows for the necessary changes to be made.
    Sub ParacyclistCheck(ByVal ID)
        'Directory is set to the path of Paracyclists.txt
        'This is done by combining the path for MyDocuments (File)
        'with the end of the directory for Paracyclists.txt stored in Module1 as ParaDirectory.
        Directory = File & Module1.ParaDirectory
        'I have used this to read from a file rather than just using streamreader so that
        'when I need to read a specific line from a file I can use the ReadLine function
        'and simply enter the line number I would need.
        'Reader2 is declared as a Streamreader to read from Paracyclists.txt
        Dim Reader2 As New System.IO.StreamReader(Directory)
        'allLines2 is neclared as a list of string values
        'An example of data stored under allLines would be '1' which would be a userID
        'another example would be C1 - C5 which would be the type of bike they use.
        Dim allLines2 As List(Of String) = New List(Of String)
        'Loop while Reader2 doesn't reach the end of the file
        'This do while loop is used to read all of the lines in the necessary file
        'and then store the next line read in the allLines2 list.
        'I have chosen to use a do while because the loop must execute
        'at least one or more times whereas if I used a normal while loop
        'then I wouldn't know If I would need it to loop at all at runtime.
        Do While Not Reader2.EndOfStream
            'The next line read is added to the list allLines2
            allLines2.Add(Reader2.ReadLine())
        Loop
        'File is closed
        Reader2.Close()
        'Line is declared as an integer
        Dim Line As Integer

        'If ID is equal to 0 then line is set to 0
        'When the user ID their information always starts at line 0,
        'hence the Line variable is set to 0 when ID  is also 0.
        If ID = 0 Then
            Line = 0
            'Else - An ID is every 2 lines in Paracyclists.txt
            'hence ID * 2 to get the linen number.
        Else
            'Line is set to ID times by 2
            'A new ID in this file is every 2 lines hence *2
            Line = ID * 2
        End If

        'ParaCheck is declared as a string
        'Set to the value of the line after the line the ID is stored on
        'Paracheck is used to check what the line equals to determine whether
        'the user Is a paracyclist or not.
        Dim ParaCheck As String = ReadLine(Line + 1, allLines2)

        'If ParaCheck is equal to 'N/A' 
        'Boolean Paracyclist from Module1 is set to false
        'This is because during register, the user didn't
        'select the Paracyclist checkbox.
        If ParaCheck = "N/A" Then
            Module1.Paracyclist = False
            'Else - If the user is a paracyclist then the boolean
            'is set to true because during register the user used the
            'paracyclist checkbox.
        Else
            'Boolean Paracyclist from Module1 is set to true
            Module1.Paracyclist = True
        End If

        'If ParaCheck is equal to 'B'
        'This is used to determine whether the user
        'has to use a tandem bike and is therefore visually
        'impaired and therefore the program changes the colours
        'of the program.
        If ParaCheck = "B" Then
            'Form background is set to black
            Me.BackColor = Color.Black
            'LblList is declared as a list of labels including all of the labels in the form excluding the title
            Dim LblList As New List(Of Label) From {Search, Label3, Label4, Label5, Label6, Label7, Label8, Speed, Distance, Time, Calories}
            'For i is equal to 0 through to the length of LblList - 1
            For i As Int32 = 0 To LblList.Count - 1
                'The next label's colour is set to white and font is made bold
                LblList(i).ForeColor = Color.White
                LblList(i).Font = Module1.BoldFont
                'i increments by 1
            Next i
            'Title colour is set to white
            LblSearch.ForeColor = Color.White
        End If
    End Sub
End Class